* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Segoe UI, Frutiger, Frutiger Linotype, Dejavu Sans, Helvetica Neue, Arial, sans-serif;
}

header,
nav,
.container,
/* je rajoute aussi .box juste pour que l'image et le h3 à l'intérieur de box se mettent l'un à côté de l'autre
vous pourriez si vous trouvez ça plus compréhensible ajouter un div.container juste pour entourer la vignette et le h3 */
.box,
footer {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    align-items: center;
}

/* pour donner de la hauteur forcée à header */
header {
    height: 100vh;
    /* formule racourcie  */
    background: url(./images/header.svg) no-repeat right -300px;
    background-size: 80vw;
}

/* logo et nav étant l'un à côté de l'autre, on a le compte 20 + 80 */
#logo {
    width: 30%;
}

nav {
    width: 40%;
}

nav,
nav a,
.bouton1 {
    color: #fff;
}

section {
    margin-top: 60px;
}

p{margin-top: 50px;}

button {
    border-radius: 30px;
    padding: 10px 30px;
    margin-top: 50px;
}

.bouton1 {
    background-image: linear-gradient(to bottom right, #FF6456, #F4347B);
    border: none;
}

.bouton2 {
    border: dashed 1px #F4347B;
    background-color: white;
    color: #F4347B;
}

/* pour le background des différentes sections sans ajouter ajouter d'id ! */
section:first-of-type,
section:nth-child(3) {
    background: url(./images/section1.svg) no-repeat -30vh top;
    background-size: 100vh;
}

/* attention : contrairement aux images format standard, il ne faut pas utiliser de "" dans le chemin de l'image */
section:nth-child(2) {
    background: url(./images/section2.svg) no-repeat 120vh top;
    background-size: 100vh;
}

h2,
h1 {
    font-weight: 200;
}

/* ça, c'est pour faire la cassure dans un même titre avec un "effet" grossissant */
h2 strong,
h1 strong {
    font-weight: 800;
    display: block;
}

.right h2 {
    margin-bottom: 100px;
}

a {
    color: darkslategray;
    text-decoration: none;
}

/* ça se sont nos blocs de contenus types avec un h2 + p + button */
.content {
    width: 40%;
    padding: 30px;
    margin: 50px 0;
}

img {
    width: 40%;
}

.right {
    text-align: right;
    padding-right: 30px;
}

.right h2 {
    margin-right: 60px;
}

/* puisque j'ai rajouté .box à la liste des éléments qui rendent leur intérieur "flexible", faut faire attention à ce que le p lui, occupe toute la largeur de la  boxe */
.box p {
    width: 100%;
}

.box img {
    width: 80px;
}

.box {
    /* et en tant qu'élément de .container, on doit leur donner une largeur */
    width: 25%;
    padding: 30px;
    border: 1px solid lightgray;
    border-radius: 30px;
    margin-bottom: 20px;
    background-color: #fff;
}

footer,
section {
    padding: 100px 50px;
}

footer {
    background: url(./images/section4.svg) no-repeat center 30vh;
    background-size: 120vw;
    height: 100vh
}

/* pour éviter de créer un selecteur juste  pour cette image */
footer img {
    /* parce que vous n'avez pas encore vu propriétés avancées flexbox flex:1 vous  pouvez utiliser width */
    width: 100%;
    flex: 1;
    flex-grow: 1;
}

footer .container {
    /* parce que vous n'avez pas encore vu en séance la propriété avancée flexbox flex:1 vous pouvez utiliser width */
    /* width: 60vw; */
    flex: 1;
    flex-grow: 2;
}


@media screen AND (max-width:1200px) {

    footer,
    section {
        padding: 30px;
        height: 100vh;
        margin: 0;
    }

    header {
        height: 100vh;
        background-position: right -150px;
        background-size: 100vh;
    }

}

@media screen AND (max-width:820px) {

    header {
        background-size: 100vh;
        background-position: center -200px;
        height: fit-content;
    }

    /* pour être conforme à la maquette version mobiles */
    #logo {
        display: none;
    }

    /* même si nous n'avons pas encore évoqué cette partie en séance, elle figure dan mon cours */
    nav {
        flex-direction: column;
        justify-content: center;
        text-align: center;
    }

    /* à défaut de flex-direction column, vous pouviez, comme déjà vu faire
    nav, nav a{ display:block;}     */

    nav a {
        margin-bottom: 20px;
    }

    section {
        margin: 0;
        padding: 0;
    }

    .box,
    .container,
    .content,
    .right,
    footer {
        text-align: center;
        padding: 2% 0;
        height: fit-content;
        /* on  pourrait se contenter de basculer en display block partout pour casser le flex et retrouver une disposition de nos éléments par défaut. Le problème, c'est que l'exercice ici consiste aussi à jouer sur la propriété order de flexbox (pour changer le flux si on s'en tient à la maquette XD version mobiles). Donc on  privilégie le flex-direction column, qui est la méthode la plus utilisée pour gérer le responsive avec flexbox */
        flex-direction: column;
        justify-content: center;
    }

    .container,
    .content,
    .right,
    footer {
        width: 100%;
    }

    .right,
    .box {
        margin: 2vh auto;
    }

    .box {
        width: 70%;
    }

    .right h2 {
        margin: 0;
    }

    .container {
        flex: auto;
    }

    section {
        background-size: 100vw;
    }

    section:nth-child(2) {
        background-position: 20vw top;
    }

    ul {
        list-style: none;
        margin-left: 0;
        padding-left: 0;
        text-align: center;
    }

    footer .container>div {
        width: 100%;
    }

    footer .container {
        text-align: center;
        flex-direction: column;
        display: block;
    }

    img {
        width: 80vw;
    }

    header .content {
        order: 4;
    }

    #responses .content {
        order: 2;
    }

    footer img {
        order: 2;
    }

    footer {
        background-position: center bottom;
    }

}